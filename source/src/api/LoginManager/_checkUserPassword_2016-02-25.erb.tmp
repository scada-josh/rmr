	/**
	 *
	 * @apiName CheckUserPassword
	 * @apiGroup Login Manager
	 * @apiVersion 0.1.0
	 *
	 * @api {post} /loginManager/checkUserPassword/ Check User Password
	 * @apiDescription คำอธิบาย : ในส่วนนี้จะมีหน้าที่ตรวจสอบ User และ Password ก่อนเข้าใช้งานระบบ
	 *
	 *
	 * @apiSampleRequest /loginManager/checkUserPassword/
	 *
	 * @apiSuccess {String} msg แสดงข้อความทักทายผู้ใช้งาน
	 *
	 * @apiSuccessExample Example data on success:
	 * {
	 *   "msg": "Hello, anusorn"
	 * }
	 *
	 * @apiError UserNotFound The <code>id</code> of the User was not found.
	 * @apiErrorExample {json} Error-Response:
	 *     HTTP/1.1 404 Not Found
	 *     {
	 *       "error": "UserNotFound"
	 *     }
	 *
	 */
	 function checkUserPassword($app, $pdo, $db, $conn_db2, $key) {

	 	/* ************************* */
        /* เริ่มกระบวนการรับค่าพารามิเตอร์จากส่วนของ Payload ซึ่งอยู่ในรูปแบบ JSON */
        /* ************************* */
        $headers = $app->request->headers;
        $ContetnType = $app->request->headers->get('Content-Type');

        /**
        * apidoc @apiSampleRequest, iOS RESTKit use content-type is "application/json"
        * Web Form, Advance REST Client App use content-type is "application/x-www-form-urlencoded"
        */
        if ($ContetnType == "application/json") {

	        $request = $app->request();
	        $result = json_decode($request->getBody());

	        /* receive request */
	        $postUserName = $result->userName;
	        $postPassWord = $result->passWord;


		} else if ($ContetnType == "application/x-www-form-urlencoded"){

		    //$userID = $app->request()->params('userID_param');
		    //$userID = $app->request()->post('userID_param');
		}



		/* ************************* */
        /* เริ่มกระบวนการเชื่อมต่อฐานข้อมูล DB2 ของ WLMA */
        /* ************************* */

        $tmpUserName = $postUserName;
        $tmpPassword_MD5 = md5($postPassWord);

        $tmpBranch_code = "";
        $rowCount = 0;

        $sql = "select * from AUTH_USER_INFO Where (USER_ID = '".$tmpUserName."' and PASSWORD = '".$tmpPassword_MD5."')";

        if ($conn_db2) {
            // # code...
            $stmt = db2_exec($conn_db2, $sql);

            while ($row = db2_fetch_both($stmt)) {
                $tmpBranch_code = iconv("TIS-620//IGNORE", "UTF-8//IGNORE",$row["BRANCH_CODE"]);

                if (!$tmpBranch_code) {
                  $tmpBranch_code = "ALL";
                } else {
                  $tmpBranch_code = "B".$tmpBranch_code;
                }

                $rowCount++;
            }
        }

        $rowCount = count($stmt);

        if ($rowCount <= 0) {
        	$tmpBranch_code = "";
        }


        /* ************************* */
        /* เริ่มกระบวนการส่งค่ากลับ */
        /* ************************* */
	      $tokenId    = base64_encode(mcrypt_create_iv(32));
	      $issuedAt   = time();
	      $notBefore  = $issuedAt + 1;             //Adding 1 seconds
	      $expire     = $notBefore + (3600*3);     // Adding 3600*3 seconds (3 hours)
	      $serverName = gethostname();             // Retrieve the server name from config file
	      /*
	       * Create the token as an array
	       */
	      $data = [
	          'iat'  => $issuedAt,         // Issued at: time when the token was generated
	          'jti'  => $tokenId,          // Json Token Id: an unique identifier for the token
	          'iss'  => $serverName,       // Issuer
	          'nbf'  => $notBefore,        // Not before
	          'exp'  => $expire,           // Expire
	          'data' => [                  // Data related to the signer user
	              'userId'   => '1234', // userid from the users table
	              'userName' => 'josh', // User name
	          ],
	          "scope" => ["read", "write", "delete"],
	          "id" => "1",
	          "userName" => $postUserName,
	          "branchCode" => "B01"
	      ];

	      $jwt = JWT::encode($data, $key);  // default algorithm: 'HS256'
	      // $jwt = JWT::encode($data, $key, 'HS512');



	      /*
	       * Create the session
	       */
	 	  $_SESSION['userName'] = $postUserName;
	 	  $_SESSION['jwt'] = $jwt;

	  	  $return_m = array("UserName" => $_SESSION['userName'], 
	  					    "PassWord" => $postPassWord,
	  					    "jwt" => $jwt,
	  					    "sql" => $sql,
	  					    "branchCode" => $tmpBranch_code);



	  	  $app->response->headers->set('Content-Type', 'application/json');
	      echo json_encode($return_m);

	 }
	 