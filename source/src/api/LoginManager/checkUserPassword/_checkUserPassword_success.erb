		/* ************************* */
        /* เริ่มกระบวนการเชื่อมต่อฐานข้อมูล MySQL */
        /* ************************* */

            // $tmpPermissions = [  
				        //       "listRTU" => [ "path" => "", 
				        //       				  "permission" => ["read", "write", "delete", "update"]
				        //       			   ], 
				        //       "listRMR" => [ "path" => "", 
				        //       				  "permission" => ["read", "write", "delete", "update"]
				        //       			   ],
					       //    ];


		    $tmpPermissions = array();

		    // $sql_permissions = "SELECT * FROM permission_tb";
		    // $results_permissions = $db->permission_tb->order("id ASC");

		    $results_permissions = $db->permission_tb->select('DISTINCT page_name');

	        foreach ($results_permissions as $result) {

	        	$tmpPagePath = "";
	        	$tmp_features = array();
	        	$results_features = $db->permission_tb->where("page_name = ? and role = ?", $result["page_name"], $tmpRole);
	        	
	        	foreach ($results_features as $result_f) {

	        		<%= partial "/LoginManager/checkUserPassword/_generatePermission" %>

	        		$tmp_features[] = array(
	                	"feature_name" => $result_f["feature_name"],
	                	"feature_desc" => $result_f["feature_desc"],
	                	"permission" => $tmpPermissions_list,
	                	"remark" => $result_f["remark"]
	            	);

	            	$tmpPagePath = $result_f["page_path"];
	        	}

	            $tmpPermissions[] = array(
	                "page_name" => $result["page_name"],
	                "page_path" => $tmpPagePath,
	                "features" => $tmp_features
	            );
	        }


	      $tokenId    = base64_encode(mcrypt_create_iv(32));
	      $issuedAt   = time();
	      $notBefore  = $issuedAt + 1;             //Adding 1 seconds
	      $expire     = $notBefore + (3600*3);     // Adding 3600*3 seconds (3 hours)
	      $serverName = gethostname();             // Retrieve the server name from config file
	      /*
	       * Create the token as an array
	       */
	      $data = [
	          'iat'  => $issuedAt,         // Issued at: time when the token was generated
	          'jti'  => $tokenId,          // Json Token Id: an unique identifier for the token
	          'iss'  => $serverName,       // Issuer
	          'nbf'  => $notBefore,        // Not before
	          'exp'  => $expire,           // Expire
	          "users" => [
	          	   "user_id" => "1",
	          	   "user_name" => $postUserName
	          ],
	          "roles" => $tmpRole,
	          "permissions" => $tmpPermissions,
	          "information" => [   			  // Data related to the signer user
	              "branchCode" => $tmpBranch_code
	          ]
	      ];



	      $jwt = JWT::encode($data, $key);  // default algorithm: 'HS256'
	      // $jwt = JWT::encode($data, $key, 'HS512');


	      /*
	       * Create the session
	       */
	 	  // $_SESSION['userName'] = $postUserName;
	 	  $_SESSION['jwt'] = $jwt;

	 	  /*
	       * Create - redirect url
	       */
	      $tmpRedirectURL = "";

	 	  if ($tmpRole == "user") {
	 	  	$tmpRedirectURL = "../Home/";
	 	  } else if ($tmpRole == "admin") {
	 	  	$tmpRedirectURL = "../Home/";
	 	  } 

	 	  $resultText = "success";

	  	  $return_m = array("result" =>  $resultText,
	  	  					"redirectURL" => $tmpRedirectURL, 
	  					    "token" => $jwt);